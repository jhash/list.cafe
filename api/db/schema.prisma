datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                           Int                           @id @default(autoincrement())
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @default(now())
  email                        String                        @unique
  person                       Person                        @relation(name: "attachedUser", fields: [personId], references: [id])
  personId                     Int                           @unique
  credentials                  UserCredential[]
  userRoles                    UserRole[]
  groupMemberships             GroupMembership[]
  listMemberships              ListMembership[]
  partnershipStatusChanges     PartnershipStatusChange[]
  partnershipContactsAdded     PartnershipContact[]
  listViews                    ListView[]
  reservations                 Reservation[]
  giftPreferencesAdded         GiftPreferences[]
  purchases                    Purchase[]
  listItemTags                 ListItemTag[]
  listTags                     ListTag[]
  peopleCreated                Person[]                      @relation(name: "createdPeople")
  // START AUTH
  hashedPassword               String
  salt                         String
  resetToken                   String?
  resetTokenExpiresAt          DateTime?
  webAuthnChallenge            String?                       @unique
  // END AUTH
  partnershipLinkStatusChanges PartnershipLinkStatusChange[]
  partnershipLinksCreated      PartnershipLink[]
}

model UserCredential {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  role      Role     @default(USER)
}

enum Role {
  USER
  SUPPORT
  ADMIN
}

model GroupMembership {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupRole GroupRole @default(VIEW)
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
}

enum GroupRole {
  VIEW
  EDIT
  ADMIN
  OWNER
}

model Group {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  name                 String
  listGroupMemberships ListGroupMembership[]
  groupMemberships     GroupMembership[]
  type                 GroupType             @default(GENERIC)
  visibility           GroupVisibility       @default(PRIVATE)
  identifier           Identifier?
}

enum GroupType {
  GENERIC
  FRIENDS
  FAMILY
  COMPANY
  NON_PROFIT
}

enum GroupVisibility {
  PRIVATE
  INVITE
  LINK
  PUBLIC
}

model ListGroupMembership {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  listRole  ListRole @default(VIEW)
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
}

enum ListRole {
  VIEW
  CONTRIBUTE
  EDIT
  ADMIN
  OWNER
}

model ListMembership {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  listRole  ListRole @default(VIEW)
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model List {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now())
  name                 String
  description          String?
  type                 ListType              @default(WISHLIST)
  listGroupMemberships ListGroupMembership[]
  listMemberships      ListMembership[]
  listItems            ListItem[]
  visibility           ListVisibility        @default(PRIVATE)
  listViews            ListView[]
  parent               List?                 @relation(name: "listInheritance", fields: [parentId], references: [id])
  parentId             Int?
  children             List[]                @relation(name: "listInheritance")
  order                Int?
  identifier           Identifier?
}

model ListView {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  list      List?    @relation(fields: [listId], references: [id])
  listId    Int?
  metadata  Json?
}

enum ListType {
  WISHLIST
  WEDDING
  BABY_SHOWER
  TOP
  BOOKMARKS
  SOCIAL
  FAVORITES
  AWESOME
  INVENTORY
  TODO
  // Like reddit, voting by default?
  FORUM
  TABLE
  LINKTREE
  JOBS
}

enum ListVisibility {
  PRIVATE
  GROUP
  LINK
  PUBLIC
}

model ListItem {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  title           String
  description     String?
  url             String?
  list            List             @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId          Int
  quantity        Int              @default(1)
  voting          Boolean          @default(false)
  reservations    Reservation[]
  purchases       Purchase[]
  parent          ListItem?        @relation(name: "listItemInheritance", fields: [parentId], references: [id])
  parentId        Int?
  children        ListItem[]       @relation(name: "listItemInheritance")
  images          Image[]
  order           Int?
  price           Decimal?         @db.Money
  partnershipLink PartnershipLink?
}

model Image {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  url       String
  height    Decimal
  width     Decimal
  format    String
  listItems ListItem[]
  person    Person[]
}

model Reservation {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  listItem   ListItem   @relation(fields: [listItemId], references: [id], onDelete: Cascade)
  listItemId Int
  quantity   Int        @default(1)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  comment    String?
  purchases  Purchase[]
}

enum ReservationStatus {
  RESERVED
  RELEASED
  FULFILLED
}

model Partnership {
  id                       Int                       @id @default(autoincrement())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now())
  name                     String
  notes                    String?
  status                   PartnershipStatus         @default(QUEUED)
  url                      String
  partnershipContacts      PartnershipContact[]
  partnershipStatusChanges PartnershipStatusChange[]
  partnershipLinks         PartnershipLink[]
  // Example AMAZON_ASSOCIATE_ID
  affiliateId              String?
  // Example: associateId (tag? on Amazon) - need to create link with API after 3 purchases
  affiliateIdParam         String?
}

enum PartnershipStatus {
  QUEUED
  CONTACTING
  SELLING
  NEGOTIATING
  SIGNING
  SUCCESSFUL
  UNSUCCESSFUL
}

model PartnershipStatusChange {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  from            PartnershipStatus
  to              PartnershipStatus
  notes           String
  changedByUser   User?             @relation(fields: [changedByUserId], references: [id])
  changedByUserId Int?
  partnership     Partnership       @relation(fields: [partnershipId], references: [id])
  partnershipId   Int
}

model PartnershipContact {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  person        Person       @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      Int          @unique
  partnership   Partnership? @relation(fields: [partnershipId], references: [id])
  partnershipId Int?
  addedByUser   User?        @relation(fields: [addedByUserId], references: [id])
  addedByUserId Int?
}

model Person {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  name               String
  email              String?             @unique
  user               User?               @relation(name: "attachedUser")
  addresses          Address[]
  defaultAddressId   Int?
  partnershipContact PartnershipContact?
  giftPreferences    GiftPreferences[]
  images             Image[]
  createdByUser      User?               @relation(name: "createdPeople", fields: [createdByUserId], references: [id])
  createdByUserId    Int?
  identifier         Identifier?
}

// https://medium.com/android-news/international-addresses-7477db08edac
model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Administrative area or district
  administrativeArea            String
  // Alternative administrative area or district
  alternativeAdministrativeArea String
  // Alternative locality
  alternativeLocality           String
  // Traditional county (GBR only)
  alternativeProvince           String
  // Name of building
  buildingName                  String
  // Number of building
  buildingNumber                String
  // Name of company (GBR only)
  companyName                   String
  // Country name in local language
  countryName                   String
  // Name of department within company (GBR only)
  departmentName                String
  // Sub-locality within town or city
  dependentLocality             String
  // Name of the dependent street or thoroughfare
  dependentStreetName           String
  // Type of dependent street or thoroughfare (e.g street, road, lane, etc.) (GBR only)
  dependentStreetSuffix         String
  // District within sub-locality
  doubleDependentLocality       String
  // Level name or number
  levelName                     String
  // Formatted address line 1
  line1                         String
  // Formatted address line 2
  line2                         String
  // Formatted address line 3
  line3                         String
  // Formatted address line 4
  line4                         String
  // Formatted address line 5
  line5                         String
  // Town or city
  locality                      String
  // PO Box Number (GBR only)
  postOfficeBoxNumber           String
  // Royal Mail Unique Delivery Point Reference Number (GBR only)
  postOfficeReference1          String
  // Royal Mail Delivery Point Suffix (GBR only)
  postOfficeReference2          String
  // Formatted postal code or ZIP code
  postalCode                    String
  // Preferred name, abbreviation or acronym for state, province or county
  province                      String
  // Abbreviation or acronym for state, province or county
  provinceCode                  String
  // Full name of state, province or county
  provinceName                  String
  // Name of the street or thoroughfare
  streetName                    String
  // Type of street or thoroughfare (e.g street, road, lane, etc.) (GBR only)
  streetSuffix                  String
  // Sub-name of building
  subBuildingName               String
  // Unit name or number
  unitName                      String

  person   Person? @relation(fields: [personId], references: [id])
  personId Int?
}

model GiftPreferences {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  clothingSizes ClothingSizes?
  giftNotes     GiftNotes?
  person        Person         @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      Int
  addedByUser   User           @relation(fields: [addedByUserId], references: [id], onDelete: Cascade)
  addedByUserId Int
}

model ClothingSizes {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  giftPreferences   GiftPreferences @relation(fields: [giftPreferencesId], references: [id], onDelete: Cascade)
  giftPreferencesId Int             @unique
  shoeSize          String?
  shirt             String?
  pants             String?
  jacket            String?
  dress             String?
  hat               String?
}

model GiftNotes {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  giftPreferences   GiftPreferences @relation(fields: [giftPreferencesId], references: [id], onDelete: Cascade)
  giftPreferencesId Int             @unique
  name              String
  note              String
}

model Purchase {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  status        PurchaseStatus @default(PENDING)
  listItem      ListItem?      @relation(fields: [listItemId], references: [id])
  listItemId    Int?
  quantity      Int            @default(1)
  purchasedBy   User?          @relation(fields: [purchasedById], references: [id])
  purchasedById Int?
  reservation   Reservation?   @relation(fields: [reservationId], references: [id])
  reservationId Int?
  price         Decimal?       @db.Money
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELED
  RETURNED
  REFUNDED
}

model ListTag {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  // Why was this tag added or changed
  note          String?
  tag           Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         Int
  addedByUser   User?    @relation(fields: [addedByUserId], references: [id])
  addedByUserId Int?
}

model ListItemTag {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  // Why was this tag added or changed
  note          String?
  tag           Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId         Int
  addedByUser   User?    @relation(fields: [addedByUserId], references: [id])
  addedByUserId Int?
}

model Tag {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  name         String
  description  String?
  listItemTags ListItemTag[]
  listTags     ListTag[]
  parentTag    Tag?          @relation(name: "tagInheritance", fields: [parentTagId], references: [id])
  parentTagId  Int?
  childTags    Tag[]         @relation(name: "tagInheritance")

  @@unique([parentTagId, name])
}

model Identifier {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  person    Person?  @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  Int?     @unique
  list      List?    @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId    Int?     @unique
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int?     @unique
}

model PartnershipLink {
  id                           String                        @id @default(cuid())
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @default(now())
  status                       PartnershipLinkStatus         @default(PENDING)
  originalUrl                  String
  partnership                  Partnership?                  @relation(fields: [partnershipId], references: [id])
  partnershipId                Int?                          @unique
  listItem                     ListItem?                     @relation(fields: [listItemId], references: [id])
  listItemId                   Int?                          @unique
  createdByUser                User?                         @relation(fields: [createdByUserId], references: [id])
  createdByUserId              Int?
  partnershipLinkStatusChanges PartnershipLinkStatusChange[]
}

enum PartnershipLinkStatus {
  PENDING
  DIGESTING
  SUCCESSFUL
  UNSUCCESSFUL
}

model PartnershipLinkStatusChange {
  id                Int                   @id @default(autoincrement())
  createdAt         DateTime              @default(now())
  from              PartnershipLinkStatus
  to                PartnershipLinkStatus
  notes             String
  changedByUser     User?                 @relation(fields: [changedByUserId], references: [id])
  changedByUserId   Int?
  partnershipLink   PartnershipLink       @relation(fields: [partnershipLinkId], references: [id])
  partnershipLinkId String
}
